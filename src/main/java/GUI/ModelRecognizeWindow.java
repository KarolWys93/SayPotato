package GUI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.wyskocki.karol.dsp.Spectrum;
import com.wyskocki.karol.dsp.filters.Preemphasis;
import sayPotato.HMMContainer;
import sayPotato.MFCC;
import sayPotato.SignalProcessing;

import javax.sound.sampled.AudioFormat;
import javax.swing.*;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class ModelRecognizeWindow extends JPanel {
    private JPanel mainPanel;
    private JTable modelTable;
    private JButton loadModelButton;
    private JButton removeModelButton;
    private JButton recognizeButton;
    private JTextPane resultsPanel;
    private JLabel resultField;

    private byte[] audioSignal;


    private JFileChooser modelFileChooser;


    ArrayList<HMMContainer> models = new ArrayList<>();

    public ModelRecognizeWindow() {
        $$$setupUI$$$();
        modelFileChooser = new JFileChooser();
        modelFileChooser.addChoosableFileFilter(new FileNameExtensionFilter(".mdl", "model"));

        loadModelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                if (modelFileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                    HMMContainer model = new HMMContainer(modelFileChooser.getSelectedFile().getPath());
                    models.add(model);
                    modelTable.updateUI();
                }
            }
        });


        AbstractTableModel modelOfTable = new AbstractTableModel() {
            @Override
            public int getRowCount() {
                return models.size();
            }

            @Override
            public int getColumnCount() {
                return 1;
            }

            @Override
            public String getColumnName(int i) {
                return "model name";
            }

            @Override
            public Object getValueAt(int i, int i1) {
                return models.get(i).getModelName();
            }
        };

        modelTable.setModel(modelOfTable);

        removeModelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                int selected = modelTable.getSelectedRow();
                if (selected >= 0) {
                    models.remove(selected);
                    modelTable.updateUI();
                }
            }
        });


        add(mainPanel);
        recognizeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                if (audioSignal != null) {

                    resultsPanel.setText("");
                    ArrayList<MFCC> mfccVactor = prepareVector();
                    //ResultPair[] results = new ResultPair[models.size()];
                    ArrayList<ResultPair> results = new ArrayList<>(models.size());

                    for (int i = 0; i < models.size(); i++) {
                        results.add(new ResultPair(models.get(i).getModelName(), models.get(i).check(mfccVactor)));
                    }

                    results.sort(null);

                    StringBuilder builder = new StringBuilder();
                    builder.append("Results:\n");
                    for (ResultPair result : results) {
                        builder.append("P: " + result.getValue() + "    : " + result.getName() + "\n");
                    }

                    if (results.get(results.size() - 1).getValue() > 0) {
                        resultField.setText("Recognize: " + results.get(results.size() - 1).getName());
                    } else {
                        resultField.setText("Recognize: Nothing was recognized");
                    }

                    resultsPanel.setText(builder.toString());

                }
            }
        });
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder("Models"));
        modelTable = new JTable();
        panel1.add(modelTable, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        loadModelButton = new JButton();
        loadModelButton.setText("load model");
        panel1.add(loadModelButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        removeModelButton = new JButton();
        removeModelButton.setText("remove model");
        panel1.add(removeModelButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel2, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        resultField = new JLabel();
        resultField.setText("Recognize:");
        panel2.add(resultField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel2.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        resultsPanel = new JTextPane();
        scrollPane1.setViewportView(resultsPanel);
        recognizeButton = new JButton();
        recognizeButton.setText("Recognize");
        mainPanel.add(recognizeButton, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private class ResultPair implements Comparable {
        private String name;
        private double value;

        public ResultPair(String name, double value) {
            this.name = name;
            this.value = value;
        }

        public String getName() {
            return name;
        }

        public double getValue() {
            return value;
        }

        @Override
        public int compareTo(Object o) {
            ResultPair pair = (ResultPair) o;

            if (value < pair.value)
                return -1;
            if (value > pair.value)
                return 1;
            return 0;
        }
    }


    private ArrayList<MFCC> prepareVector() {
        AudioFormat format = new AudioFormat(44100f, 16, 1, true, false);

        int overlay = 512;
        int frameSize = 1024;
        Preemphasis preemphasis = new Preemphasis();

        double[] signalWave = new double[audioSignal.length / 2];

        for (int i = 0; i < signalWave.length; i++) {
            int LSB = (int) audioSignal[2 * i];
                         /* Second byte is MSB (high order) */
            int MSB = (int) audioSignal[2 * i + 1];
            signalWave[i] = MSB << 8 | (0xFF & LSB);
        }

        ArrayList<double[]> frames = SignalProcessing.framing(preemphasis.filter(signalWave), frameSize, overlay);
        ArrayList<Spectrum> spectrums = SignalProcessing.createSpectrogram(frames, format.getSampleRate());
        ArrayList<MFCC> mfccs = new ArrayList<>(spectrums.size());
        for (Spectrum spectrum : spectrums) {
            MFCC mfcc = new MFCC(13, 23);
            mfcc.calculate(spectrum);
            mfccs.add(mfcc);
        }
        return mfccs;
    }


    public void setAudioSignal(byte[] audioSignal) {
        this.audioSignal = audioSignal;
    }

}
