package GUI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.wyskocki.karol.dsp.Spectrum;
import com.wyskocki.karol.dsp.filters.Preemphasis;
import org.jfree.chart.ChartPanel;
import sayPotato.FilePath;
import sayPotato.MFCC;
import sayPotato.SignalProcessing;
import sayPotato.SpeechDetection;
import sayPotato.sound.SoundOpener;
import sayPotato.sound.SoundPlayer;
import sayPotato.sound.SoundRecorder;
import sayPotato.sound.SoundSaver;

import javax.sound.sampled.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;


public class AppMainWindow extends JFrame {


    private JPanel mainPanel;
    private JPanel signalPanel;
    private JButton recordBtn;
    private JButton playBtn;
    private JButton analysisBtn;
    private JPanel spectrumPanel;
    private JButton showMFCCbtn;
    private JButton loadBtn;
    private JButton saveBtn;
    private JButton speechDetectButton;
    private JButton potatoButton;
    private JButton tomatoButton;

    private SignalView signalView;
    private SpectrumView spectrumView;
    private MFCCViewTable mfccViewTable;
    private SpeechDetectWindow detectWindow;


    int iterator = 0;

    //audio
    AudioFormat format = new AudioFormat(44100f, 16, 1, true, false);

    SoundRecorder recorder;
    SoundPlayer player;

    private byte[] audioSignal;
    private ArrayList<MFCC> mfccArray;


    SpeechDetection speechDetection = new SpeechDetection();
    FilePath recordFileSelector = new FilePath();


    public AppMainWindow(String windowName) {
        super(windowName);

        // GUI initializer generated by IntelliJ IDEA GUI Designer
        // >>> IMPORTANT!! <<<
        // DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
        getContentPane().add(mainPanel);

        recorder = new SoundRecorder();
        player = new SoundPlayer();
        detectWindow = new SpeechDetectWindow();

        player.addPositionListener(new SoundPlayer.PlayerPositionListener() {
            @Override
            public void changePosition(final double position) {
                //System.out.println("Update position");
                try {
                    EventQueue.invokeAndWait(new Runnable() {
                        @Override
                        public void run() {
                            if (position >= 0) {
                                signalView.setPointer(position);
                            } else {
                                if (!player.isRuning())
                                    stopPlay();
                            }
                        }
                    });
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });


        recordBtn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent actionEvent) {
                if (!recorder.isRunning()) {
                    startRecording();
                } else {
                    stopRecording();
                }
            }
        });


        playBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                if (playBtn.getText().equals("Play"))
                    startPlay(audioSignal, format);
                else
                    stopPlay();
            }
        });
        analysisBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                if (audioSignal != null) {
                    System.out.println("Audio length: " + audioSignal.length / 2 * (1 / format.getSampleRate()) + " s");
                    double stopTime = 0;
                    double startTime = System.currentTimeMillis();
                    vectorGenerate();
                    stopTime = System.currentTimeMillis();
                    System.out.println("Running time: " + (stopTime - startTime) + " ms");
                }
            }
        });
        showMFCCbtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                if (mfccArray != null) {
                    mfccViewTable.showMFCCTable(mfccArray);
                }
            }
        });

        mfccViewTable = new MFCCViewTable();
        loadBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                String filePath = recordFileSelector.getOpenPath();
                if (filePath != null) {
                    audioSignal = SoundOpener.getSoundByteArray(filePath);
                    signalView.setData(convertToWave(audioSignal), format.getSampleRate());
                }
            }
        });
        saveBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                if (audioSignal != null) {
                    String filePath = recordFileSelector.getSavePath();
                    if (filePath != null) {
                        SoundSaver.saveRecord(audioSignal, format, filePath);
                    }
                }
            }
        });
        speechDetectButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {

                if (audioSignal != null) {
                    speechDetection.speechDetect(convertToWave(audioSignal), format.getSampleRate());
                    if (detectWindow.showDialog(speechDetection.getWords())) {
                        SpeechDetection.Section section = detectWindow.getSelected();
                        if (section == null) {
                            return;
                        }
                        System.out.println("Start: " + (section.start * 10) + " ms, End: " + (section.end * 10) + " ms");
                        audioSignal = Arrays.copyOfRange(audioSignal,
                                (int) (section.start * 0.01 * format.getSampleRate() * 2),
                                (int) (section.end * 0.01 * format.getSampleRate() * 2));
                        signalView.setData(convertToWave(audioSignal), format.getSampleRate());

                    }
                }

            }
        });
        potatoButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {

                ArrayList<String> filePaths = new ArrayList<>(101);
                for (int i = 1; i <= 101; i++) {
                    filePaths.add("/home/karol/Muzyka/SayPotato/WINDOW/window" + String.format("%03d", i) + ".wav");
                }

                audioSignal = SoundOpener.getSoundByteArray(filePaths.get(iterator));
                signalView.setData(convertToWave(audioSignal), format.getSampleRate());

                speechDetection.speechDetect(convertToWave(audioSignal), format.getSampleRate());
                if (detectWindow.showDialog(speechDetection.getWords())) {
                    SpeechDetection.Section section = detectWindow.getSelected();
                    if (section == null) {
                        return;
                    }
                    System.out.println("Start: " + (section.start * 10) + " ms, End: " + (section.end * 10) + " ms");
                    audioSignal = Arrays.copyOfRange(audioSignal,
                            (int) (section.start * 0.01 * format.getSampleRate() * 2),
                            (int) (section.end * 0.01 * format.getSampleRate() * 2));
                    signalView.setData(convertToWave(audioSignal), format.getSampleRate());

                }
                iterator++;

            }
        });
        tomatoButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                String filepath = "/home/karol/Muzyka/SayPotato/WINDOW_cut/window" + String.format("%03d", iterator + 1) + ".wav";
                SoundSaver.saveRecord(audioSignal, format, filepath);
            }
        });
    }


    private void startRecording() {

        stopPlay();
        playBtn.setEnabled(false);
        recordBtn.setText("Stop");

        signalView.clearPlots();

        Thread stopper = new Thread(new Runnable() {
            public void run() {
                try {
                    Thread.sleep(5010);
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
                if (recorder.isRunning())
                    stopRecording();
            }
        });

        recorder.startRecord(format);

        while (!recorder.isRunning()) {
            try {
                Thread.sleep(1);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        stopper.start();
    }

    private void stopRecording() {
        System.out.println("Stop signal");
        recorder.stop();

        //wait until recorder is running
        while (recorder.isRunning()) {
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        audioSignal = recorder.getSoundRecord();
        signalView.setData(convertToWave(audioSignal), format.getSampleRate());

        playBtn.setEnabled(true);
        recordBtn.setText("Record");
    }

    private void startPlay(byte[] audioSignal, AudioFormat format) {
        if (audioSignal != null) {
            player.play(audioSignal, format);
            playBtn.setText("Stop");
        }
    }

    private void stopPlay() {
        if (player.isRuning()) {
            player.stop();
        }
        playBtn.setText("Play");
    }

    private double[] convertToWave(byte[] data) {
        double[] signalWave = new double[data.length / 2];

        for (int i = 0; i < signalWave.length; i++) {
            int LSB = (int) data[2 * i];
                         /* Second byte is MSB (high order) */
            int MSB = (int) data[2 * i + 1];
            signalWave[i] = MSB << 8 | (0xFF & LSB);
        }
        return signalWave;
    }

    private void createUIComponents() {
        signalPanel = new JPanel();
        signalPanel.setLayout(new BorderLayout());

        signalView = new SignalView();
        ChartPanel chartPanel = new ChartPanel(signalView.getChart());
        chartPanel.setRefreshBuffer(true);
        chartPanel.setMouseWheelEnabled(true);
        chartPanel.setRangeZoomable(false);
        signalPanel.add(chartPanel, BorderLayout.CENTER);

        spectrumPanel = new JPanel();
        spectrumPanel.setLayout(new BorderLayout());

        spectrumView = new SpectrumView();
        ChartPanel spectrumChartPanel = new ChartPanel(spectrumView.getChart());
        spectrumChartPanel.setMouseWheelEnabled(true);
        spectrumPanel.add(spectrumChartPanel, BorderLayout.CENTER);

    }

    private void vectorGenerate() {
        int overlay = 512;
        int frameSize = 1024;
        double spectrumSpacing = (frameSize / format.getSampleRate()) - (overlay / format.getSampleRate());
        Preemphasis preemphasis = new Preemphasis();

        ArrayList<double[]> frames = SignalProcessing.framing(preemphasis.filter(convertToWave(audioSignal)), frameSize, overlay);
        ArrayList<Spectrum> spectrums = SignalProcessing.createSpectrogram(frames, format.getSampleRate());
        spectrumView.setSpectrum(spectrums, spectrumSpacing);

        mfccArray = new ArrayList<>(spectrums.size());
        for (Spectrum spectrum : spectrums) {
            MFCC mfcc = new MFCC(13, 23);
            mfcc.calculate(spectrum);
            mfccArray.add(mfcc);
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 7, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Voice record"));
        recordBtn = new JButton();
        recordBtn.setText("Record");
        panel1.add(recordBtn, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        playBtn = new JButton();
        playBtn.setText("Play");
        panel1.add(playBtn, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panel1.add(signalPanel, new GridConstraints(1, 0, 1, 5, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, new Dimension(-1, 200), new Dimension(-1, 200), null, 0, false));
        loadBtn = new JButton();
        loadBtn.setText("Load");
        panel1.add(loadBtn, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        saveBtn = new JButton();
        saveBtn.setText("Save");
        panel1.add(saveBtn, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        speechDetectButton = new JButton();
        speechDetectButton.setText("Speech detect");
        panel1.add(speechDetectButton, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        potatoButton = new JButton();
        potatoButton.setText("Potato");
        panel1.add(potatoButton, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tomatoButton = new JButton();
        tomatoButton.setText("Tomato");
        panel1.add(tomatoButton, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Spectrum"));
        panel2.add(spectrumPanel, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        analysisBtn = new JButton();
        analysisBtn.setText("Analysis");
        panel2.add(analysisBtn, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        showMFCCbtn = new JButton();
        showMFCCbtn.setText("Show MFCC");
        panel2.add(showMFCCbtn, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
