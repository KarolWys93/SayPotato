package GUI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import sayPotato.SpeechDetection;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class SpeechDetectWindow extends JDialog {

    private boolean clickOK = false;
    private JPanel mainPanel;
    private JButton cancelButton;
    private JButton cutButton;
    private JPanel sectionsPanel;

    private ArrayList<SpeechDetection.Section> sections;
    private ArrayList<JRadioButton> sectionButtons;

    public SpeechDetectWindow() {
        super();
        setTitle("Speech Detection");
        $$$setupUI$$$();
        setModal(true);
        getContentPane().add(mainPanel);
        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                clickOK = false;
                dispose();
            }
        });
        cutButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                clickOK = true;
                dispose();
            }
        });
    }

    public boolean showDialog(ArrayList<SpeechDetection.Section> sections) {
        this.sections = sections;
        sectionButtons = new ArrayList<>(sections.size());
        ButtonGroup group = new ButtonGroup();
        sectionsPanel.removeAll();
        sectionsPanel.setLayout(new GridLayoutManager(sections.size() + 1, 1, new Insets(0, 0, 0, 0), -1, -1));
        for (int i = 0; i < sections.size(); i++) {
            SpeechDetection.Section section = sections.get(i);
            JRadioButton radioButton = new JRadioButton();
            radioButton.setText("Start: " + (section.start * 10) + " ms, End: " + (section.end * 10) + " ms");
            sectionsPanel.add(radioButton, new GridConstraints(i, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
            group.add(radioButton);
            sectionButtons.add(radioButton);
        }
        final Spacer spacer1 = new Spacer();
        sectionsPanel.add(spacer1, new GridConstraints(sections.size(), 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));


        pack();
        int width = getWidth();
        int height = getHeight();
        setBounds(Toolkit.getDefaultToolkit().getScreenSize().width / 2 - width / 2,
                Toolkit.getDefaultToolkit().getScreenSize().height / 2 - height / 2,
                width,
                height);
        setVisible(true);

        return clickOK;
    }

    public SpeechDetection.Section getSelected() {
        int selectedIndex = -1;

        for (int i = 0; i < sectionButtons.size(); i++) {
            if (sectionButtons.get(i).isSelected()) {
                selectedIndex = i;
                break;
            }
        }
        if (selectedIndex < 0)
            return null;
        return sections.get(selectedIndex);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        sectionsPanel = new JPanel();
        sectionsPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(sectionsPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(24, 318), null, 0, false));
        sectionsPanel.setBorder(BorderFactory.createTitledBorder("Sections"));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_HORIZONTAL, 1, 1, null, null, null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        panel1.add(cancelButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cutButton = new JButton();
        cutButton.setText("Cut");
        panel1.add(cutButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
